global:
  postgresql:
    username: keycloak
    password: changme-keycloak-1
    database: keycloak
    repmgrUsername: repmgr
    repmgrPassword: changme-keycloak-2
    repmgrDatabase: repmgr
    auth:
      postgresPassword: changme-keycloak-3
      username: keycloak
      password: changeme-keycloak-4
      database: "keycloak"
postgresql:
  primary:
    nodeSelector:
      infra: "true"
    tolerations:
      - key: "infra"
        operator: "Exists"

keycloakx:
  replicas: 3
  nodeSelector:
    infra: "true"
  tolerations:
    - key: "infra"
      operator: "Exists"
  resources:
    requests:
      cpu: "1"
      memory: "1Gi"
    limits:
      cpu: "4"
      memory: "16Gi"
  rbac:
    create: true
    rules:
      # RBAC rules for KUBE_PING
      - apiGroups:
          - ""
        resources:
          - pods
        verbs:
          - get
          - list

  # SecurityContext for the entire Pod. Every container running in the Pod will inherit this SecurityContext. This might be relevant when other components of the environment inject additional containers into running Pods (service meshes are the most prominent example for this)
  podSecurityContext:
    fsGroup: 1000

  # SecurityContext for the Keycloak container
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true

  ingress:
    # If `true`, an Ingress is created
    enabled: true
    # The Service port targeted by the Ingress
    servicePort: http
    # Ingress annotations
    annotations:
      ## Resolve HTTP 502 error using ingress-nginx:
      ## See https://www.ibm.com/support/pages/502-error-ingress-keycloak-response
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k

    # Additional Ingress labels
    labels: {}
    # List of rules for the Ingress
    rules:
      - host: "auth.lab.oidc-spa.dev"
        # Paths for the host
        paths:
          - path: /
            pathType: Prefix
    # TLS configuration
    tls:
      - hosts:
          - auth.lab.oidc-spa.dev
    # ingress for console only (/auth/admin)
    console:
      # If `true`, an Ingress is created for console path only
      enabled: true
      # The name of Ingress Class associated with the console ingress only
      ingressClassName: ""
      # Ingress annotations for console ingress only
      # Useful to set nginx.ingress.kubernetes.io/whitelist-source-range particularly
      annotations: {}
      rules:
        - # Ingress host
          host: auth.lab.oidc-spa.dev
          # Paths for the host
          paths:
            - path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/admin'
              pathType: Prefix
      tls:
        - hosts:
            - auth.lab.oidc-spa.dev

  command:
    - "/opt/keycloak/bin/kc.sh"
    - "start"
    - "--http-enabled=true"
    - "--http-port=8080"
    - "--hostname-strict=false"
    - "--hostname-strict-https=false"
    - "--features=preview"
    - "--log-level=org.keycloak.events:debug"

  extraEnv: |
    - name: ONYXIA_RESOURCES_ALLOWED_ORIGINS
      value: "https://onyxia.oidc-spa.dev, http://localhost, http://127.0.0.1"
    - name: KEYCLOAK_ADMIN
      value: admin
    - name: KEYCLOAK_ADMIN_PASSWORD
      value: changeme-keycloak
    - name: JAVA_OPTS_APPEND
      value: >-
        -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless -Dkeycloak.profile=preview

  extraInitContainers: |
    - name: realm-ext-provider
      image: curlimages/curl
      imagePullPolicy: IfNotPresent
      command:
        - sh
      args:
        - -c
        - |
          curl -L -f -S -o /extensions/keycloak-franceconnect.jar https://github.com/InseeFr/Keycloak-FranceConnect/releases/download/5.0.0/keycloak-franceconnect-5.0.0.jar
          curl -L -f -S -o /extensions/onyxia-web.jar https://github.com/InseeFrLab/onyxia/releases/download/v7.14.1/keycloak-theme.jar
      volumeMounts:
        - name: extensions
          mountPath: /extensions

  extraVolumeMounts: |
    - name: extensions
      mountPath: /opt/keycloak/providers

  extraVolumes: |
    - name: extensions
      emptyDir: {}

  service:
    # Annotations for headless and HTTP Services
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "80"
      prometheus.io/path: "/auth/metrics"

  dbchecker:
    enabled: true

  database:
    vendor: postgres
    hostname: keycloakx-postgresql
    port: 5432
    username: keycloak
    password: changeme-keycloak-4
    database: keycloak